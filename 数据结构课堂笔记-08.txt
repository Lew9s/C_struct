数据结构课堂笔记-08

顺序栈，栈底放在向量的高端，自己去定义
顺序栈，ElemType data[Max];Max太小，栈经常满；Max太大，栈的空间会浪费。
双栈：ElemType data[Max];用天存储2个栈的元素。其中，1号栈，栈底设在向量的低端，2号栈的栈底设在向量的高端，所以需要设置2个栈的栈的栈顶下标：top1,top2

#define Max 5
typedef int ElemType;
typedef struct Node{
	ElemType data[Max];
	int top1,top2;
}dbSeqStack;
seqStack * InitStack(){//构造一个空栈s
	seqStack *s=(dbSeqStack *)malloc(sizeof(dbSeqStack));
	s->top1=-1;
	s->top2=Max;
	return s;
}
void DestroyStack(dbSeqStack *s){//销毁栈s。释放栈s占用的存储空间。
	free(s);
}
int stackEmpty(dbSeqStack *s,int i){//判断栈s中的第i号栈是否为空:若为空，则返回1；否则返回0。
	if(i==1){ return (s->top1==-1?1:0);	}
	if(i==2){ return (s->top2==Max?1:0);	}
	printf("参数不当\n");  return -1;
}
int Push(dbSeqStack *s,ElemType e,int i);//进栈。将元素e压入到栈s的第i号栈中，如果入栈(进栈)成功，返回1，否则返回0
int Pop(dbSeqStack *s,int i,ElemType *e);//出栈。将栈s的第i号栈出栈，如果出栈成功，将其栈顶元素赋给指针变量e的指向，修改栈顶的top,返回1；否则返回0。
int GetTop(dbSeqStack *s,int i,ElemType *e);//取栈s的第i号栈的栈顶元素。如果成功，并其栈顶元素值赋给指针变量e的指向，返回1；否则返回0。

栈满：s->top1+s->top2==Max  错！！！
     s->top1==s->top2-1   正确！
同学们课外完成以上3个函数的算法设计和程序代码，并编写主函数测试。


栈的链接存储：链栈
以不带头结点的单链表存储链栈

#include<stdio.h>
typedef int ElemType;
typedef struct Node{
	ElemType data;
	struct Node *next;
}linkStack;
linkStack * InitStack(){
	linkStack *top=NULL;
	return top;
}
void DestroyStack(linkStack *top){
	linkStack *p=top;
	while(p){
		top=top->next;
		free(p);
		p=top;
	}
}
int stackEmpty(linkStack *top){
	return (!top?1:0);
}
linkStack * Push(linkStack *top,ElemType x){
	linkStack *s = (linkStack *)malloc(sizeof(linkStack));
	s->data=x; 
	s->next=top;
	top=s;
	return top;
}
int Pop(linkStack *top,ElemType *x){
	if(!top) { printf("栈空\n");  return 0;	}
	*x=top->data;
	linkStack *p=top;
	top=top->next;
	free(p);
	return 1;
}
int getTop(linkStack *top,ElemType *x){
	if(!top) { printf("栈空\n");  return 0;	}
	*x=top->data;
	return 1;
}
main(){
	ElemType x;
	linkStack *LS = InitStack();
	printf("%d\n",stackEmpty(LS));//1
	LS=Push(LS,100);
	printf("%d\n",stackEmpty(LS));//0
	printf("%d,%d\n",getTop(LS,&x),x);//1,100,实际结果是1,0,分析原因，找出错误，改进 
	/*int i;
	for(i=1;i<4;++i)
		Push(LS,i);
	
	printf("%d\n",stackEmpty(LS));//0
	printf("%d,%d\n",getTop(LS,&x),x);//1,3
	printf("%d,%d\n",Pop(LS,&x),x);//1,3
	printf("%d,%d\n",Pop(LS,&x),x);//1,2
	printf("%d,%d\n",Pop(LS,&x),x);//1,1
	printf("%d,%d\n",getTop(LS,&x),x);//栈空\n  0,1
	*/
	return 0;
}






   
